// require('dotenv').config();

App = {
  web3Provider: null,
  contracts: {},

  init: function() {
    // Load pets.
    console.log("init, getting local json file");
    $.getJSON('../pets.json', function(data) {
      var petsRow = $('#petsRow');
      var petTemplate = $('#petTemplate');

      for (i = 0; i < data.length; i ++) {
        petTemplate.find('.panel-title').text(data[i].name);
        petTemplate.find('img').attr('src', data[i].picture);
        petTemplate.find('.pet-breed').text(data[i].breed);
        petTemplate.find('.pet-age').text(data[i].age);
        petTemplate.find('.pet-location').text(data[i].location);
        petTemplate.find('.btn-adopt').attr('data-id', data[i].id);

        petsRow.append(petTemplate.html());
      }
    });

    return App.initWeb3();
  },


    initWeb3: async function () {
        console.log("initWeb3");
        // Modern dapp browsers...
        if (window.ethereum) {
            App.web3Provider = window.ethereum;
            try {
                // Request account access
                await window.ethereum.enable();
            } catch (error) {
                // User denied account access...
                console.error("User denied account access")
            }
        }
        // Legacy dapp browsers...
        else if (window.web3) {
            App.web3Provider = window.web3.currentProvider;

        }
        // If no injected web3 instance is detected, fall back to Sephia
        else {
            // App.web3Provider = new Web3.providers.HttpProvider('http://localhost:8545');
            // webapi =
            // const infuraApiKey = process.env.INFURA_API_KEY;
            // const mnemonic = process.env.MNEMONIC;

            // var provider = process.env.INFURA_API_KEY;
            var provider = "https://sepolia.infura.io/v3/2d15ec56aa4b47cba10e7b44e5b79d2a"
            App.web3Provider = new Web3.providers.HttpProvider(provider);

        }
        web3 = new Web3(App.web3Provider);
        // web3.eth.getBlockNumber().then((result) => {
        //     console.log("Latest Ethereum block number: is", result);
        // });

        return App.initContract();
    },

    initContract: function () {
        $.getJSON('Marketplace.json', function (data) {
            // Get the necessary contract artifact file and instantiate it with truffle-contract
            var MarketplaceArtifact = data;
            App.contracts.Marketplace = TruffleContract(MarketplaceArtifact);

            // Set the provider for our contract
            App.contracts.Marketplace.setProvider(App.web3Provider);

            // Use our contract to get and display the items for sale
            return App.displayItemsForSale();
        });
        return App.bindEvents();
    },

  bindEvents: function() {
      $(document).on('click', '.btn-buy', App.handlePurchase);
  },

    displayItemsForSale: function () {
        var marketplaceInstance;

        App.contracts.Marketplace.deployed().then(function (instance) {
            marketplaceInstance = instance;

            // Call the smart contract function to get the items for sale
            return marketplaceInstance.getItemsForSale.call();
        }).then(function (items) {
            var itemsRow = $('#itemsRow');
            var itemTemplate = $('#itemTemplate');

            // Iterate over each item and display it
            for (i = 0; i < items.length; i++) {
                itemTemplate.find('.panel-title').text(items[i].name);
                itemTemplate.find('img').attr('src', items[i].picture);
                itemTemplate.find('.item-price').text(web3.utils.fromWei(items[i].price, 'ether') + " ETH");
                itemTemplate.find('.btn-buy').attr('data-id', items[i].id);
                itemTemplate.find('.btn-buy').attr('data-price', items[i].price);

                itemsRow.append(itemTemplate.html());
            }
        }).catch(function (err) {
            console.log(err.message);
        });
    },
    handlePurchase: function (event) {
        event.preventDefault();

        var itemId = parseInt($(event.target).data('id'));
        var itemPrice = $(event.target).data('price'); // Assuming price is attached to the button data

        var marketplaceInstance;

        web3.eth.getAccounts(function (error, accounts) {
            if (error) {
                console.log(error);
                return;
            }

            var account = accounts[0];

            App.contracts.Marketplace.deployed().then(function (instance) {
                marketplaceInstance = instance;

                // Execute the "purchase" function from the smart contract
                return marketplaceInstance.purchaseItem(itemId, { from: account, value: itemPrice });
            }).then(function (result) {
                // Handle the result of the transaction
                console.log('Item purchased!', result);
                // Optionally trigger a refresh of the items
                return App.displayItemsForSale();
            }).catch(function (err) {
                console.log(err.message);
            });
        });
    }
    // markAdopted: function (adopters, account) {
    //     var adoptionInstance;

    //     App.contracts.Adoption.deployed().then(function (instance) {
    //         adoptionInstance = instance;

    //         // 调用合约的getAdopters(), 用call读取信息不用消耗gas
    //         return adoptionInstance.getAdopters.call();
    //     }).then(function (adopters) {
    //         for (i = 0; i < adopters.length; i++) {
    //             if (adopters[i] !== '0x0000000000000000000000000000000000000000') {
    //                 $('.panel-pet').eq(i).find('button').text('Success').attr('disabled', true);
    //             }
    //         }
    //     }).catch(function (err) {
    //         console.log(err.message);
    //     });
    // },


    // handleAdopt: function (event) {
    //     event.preventDefault();

    //     var petId = parseInt($(event.target).data('id'));

    //     var adoptionInstance;

    //     web3.eth.getAccounts(function (error, accounts) {
    //         if (error) {
    //             console.log(error);
    //         }

    //         var account = accounts[0];

    //         App.contracts.Adoption.deployed().then(function (instance) {
    //             adoptionInstance = instance;

    //             return adoptionInstance.adopt(petId, { from: account });
    //         }).then(function (result) {
    //             return App.markAdopted();
    //         }).catch(function (err) {
    //             console.log(err.message);
    //         });
    //     });
    // }

};

$(function() {
  $(window).load(function() {
    App.init();
  });
});
